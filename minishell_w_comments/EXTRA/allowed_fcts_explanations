C Library Functions:

***readline
Prototype: char *readline(const char *prompt);
Purpose: Reads a line of text from the standard input with a specified prompt.
Return Value: A pointer to the allocated line buffer, or NULL on error.

***rl_clear_history
Prototype: void rl_clear_history(void);
Purpose: Clears the history list maintained by the readline library.

***rl_on_new_line
Prototype: void rl_on_new_line(void);
Purpose: Signals readline that the cursor has moved to a new line.

***rl_replace_line
Prototype: void rl_replace_line(const char *text, int clear_undo);
Purpose: Replaces the current line of input with the given text.

***rl_redisplay
Prototype: void rl_redisplay(void);
Purpose: Updates the display to reflect changes in the input line.

***add_history
Prototype: void add_history(const char *line);
Purpose: Adds a line to the history list maintained by the readline library.

***printf
Prototype: int printf(const char *format, ...);
Purpose: Writes formatted output to the standard output.
Return Value: The number of characters written.

***malloc
Prototype: void *malloc(size_t size);
Purpose: Allocates a block of memory of the specified size.
Return Value: A pointer to the allocated memory, or NULL on failure.

***free
Prototype: void free(void *ptr);
Purpose: Frees the memory block pointed to by ptr.

***write
Prototype: ssize_t write(int fd, const void *buf, size_t count);
Purpose: Writes count bytes from the buffer buf to the file descriptor fd.
Return Value: The number of bytes written, or -1 on error.

***access
Prototype: int access(const char *pathname, int mode);
Purpose: Checks if the calling process can access the file specified by pathname.
Return Value: 0 if access is granted, -1 on failure.

***open
Prototype: int open(const char *pathname, int flags, mode_t mode);
Purpose: Opens a file and returns a file descriptor.
Return Value: The file descriptor, or -1 on error.

***read
Prototype: ssize_t read(int fd, void *buf, size_t count);
Purpose: Reads up to count bytes from the file descriptor fd into the buffer buf.
Return Value: The number of bytes read, or -1 on error.

***close
Prototype: int close(int fd);
Purpose: Closes the file descriptor fd.
Return Value: 0 on success, -1 on failure.

***fork
Prototype: pid_t fork(void);
Purpose: Creates a new process by duplicating the calling process.
Return Value: Returns 0 to the child process, and the child''s PID to the parent, or -1 on error.

***wait
Prototype: pid_t wait(int *status);
Purpose: Waits for any child process to exit and returns the PID of the terminated child.
Return Value: The PID of the terminated child, or -1 on error.

***waitpid
Prototype: pid_t waitpid(pid_t pid, int *status, int options);
Purpose: Waits for a specific child process to exit.
Return Value: The PID of the terminated child, or -1 on error.

***wait3
Prototype: pid_t wait3(int *status, int options, struct rusage *rusage);
Purpose: Similar to waitpid, with additional resource usage information.
Return Value: The PID of the terminated child, or -1 on error.

***wait4
Prototype: pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
Purpose: Similar to waitpid, with additional resource usage information.
Return Value: The PID of the terminated child, or -1 on error.

***signal
Prototype: void (*signal(int signum, void (*handler)(int)))(int);
Purpose: Sets the disposition of the signal handler for the specified signal.
Return Value: Returns the previous signal handler.

***sigaction
Prototype: int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
Purpose: Examines or modifies the action to be taken on a specified signal.
Return Value: 0 on success, -1 on error.

***sigemptyset
Prototype: int sigemptyset(sigset_t *set);
Purpose: Initializes an empty signal set.
Return Value: 0 on success, -1 on error.

***sigaddset
Prototype: int sigaddset(sigset_t *set, int signum);
Purpose: Adds the specified signal to the signal set.
Return Value: 0 on success, -1 on error.

***kill
Prototype: int kill(pid_t pid, int sig);
Purpose: Sends a signal to a process or a group of processes.
Return Value: 0 on success, -1 on error.

***exit
Prototype: void exit(int status);
Purpose: Exits the calling process with the specified status.

***getcwd
Prototype: char *getcwd(char *buf, size_t size);
Purpose: Gets the current working directory.
Return Value: A pointer to buf, or NULL on error.

***chdir
Prototype: int chdir(const char *path);
Purpose: Changes the current working directory to the specified path.
Return Value: 0 on success, -1 on error.

***stat
Prototype: int stat(const char *pathname, struct stat *statbuf);
Purpose: Gets information about a file.
Return Value: 0 on success, -1 on error.

***lstat
Prototype: int lstat(const char *pathname, struct stat *statbuf);
Purpose: Similar to stat, but does not follow symbolic links.
Return Value: 0 on success, -1 on error.

***fstat
Prototype: int fstat(int fd, struct stat *statbuf);
Purpose: Gets information about an open file.
Return Value: 0 on success, -1 on error.

***unlink
Prototype: int unlink(const char *pathname);
Purpose: Deletes a name from the file system.
Return Value: 0 on success, -1 on error.

***execve
Prototype: int execve(const char *pathname, char *const argv[], char *const envp[]);
Purpose: Executes a program.
Return Value: -1 on error, and does not return on success.

***dup
Prototype: int dup(int oldfd);
Purpose: Duplicates an open file descriptor.
Return Value: The new file descriptor, or -1 on error.

***dup2
Prototype: int dup2(int oldfd, int newfd); //the file opened with oldfd gets assigned the fd new fd (which is 0 f.e.) so that it will be confused/handled by the system with/like newfd (which is f.e. stdin)
Purpose: Duplicates an open file descriptor to a specific file descriptor number.
Return Value: The new file descriptor, or -1 on error.

***pipe
Prototype: int pipe(int pipefd[2]);
Purpose: Creates a pipe, a unidirectional communication channel.
Return Value: 0 on success, -1 on error.

***opendir
Prototype: DIR *opendir(const char *name);
Purpose: Opens a directory stream.
Return Value: A pointer to the directory stream, or NULL on error.

***readdir
Prototype: struct dirent *readdir(DIR *dirp);
Purpose: Reads the next directory entry from the directory stream.
Return Value: A pointer to the dirent structure, or NULL on error or end of directory.

***closedir
Prototype: int closedir(DIR *dirp);
Purpose: Closes the directory stream.
Return Value: 0 on success, -1 on error.

***strerror
Prototype: char *strerror(int errnum);
Purpose: Returns a pointer to the textual representation of the current errno value (errnum).
Return Value: A pointer to the error message string.

***perror
Prototype: void perror(const char *s);
Purpose: Prints a description for the last error that occurred.
Return Value: None.

***isatty
Prototype: int isatty(int fd);
Purpose: Tests whether a file descriptor refers to a terminal.
Return Value: 1 if true, 0 if false, -1 on error.

***ttyname
Prototype: char *ttyname(int fd);
Purpose: Returns the name of the terminal file associated with the file descriptor.
Return Value: A pointer to the terminal name, or NULL on error.

***ttyslot
Prototype: int ttyslot(void);
Purpose: Returns the slot number of the current user's terminal.
Return Value: The slot number, or -1 on error.

***ioctl
Prototype: int ioctl(int fd, unsigned long request, ...);
Purpose: Performs device-specific operations on the file descriptor fd.
Return Value: 0 on success, -1 on error.

***getenv
Prototype: char *getenv(const char *name);
Purpose: Retrieves the value of the environment variable with the specified name.
Return Value: A pointer to the value string, or NULL if the variable is not found.

***tcsetattr
Prototype: int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
Purpose: Sets the terminal attributes.
Return Value: 0 on success, -1 on error.

***tcgetattr
Prototype: int tcgetattr(int fd, struct termios *termios_p);
Purpose: Gets the terminal attributes.
Return Value: 0 on success, -1 on error.

***tgetent
Prototype: int tgetent(char *bp, const char *name);
Purpose: Retrieves the termcap entry for the specified terminal type.
Return Value: 1 on success, 0 if the entry is not found, -1 on error.

***tgetflag
Prototype: int tgetflag(const char *id);
Purpose: Gets the boolean value of the specified capability in the termcap database.
Return Value: The boolean value, or 0 on error.

***tgetnum
Prototype: int tgetnum(const char *id);
Purpose: Gets the numeric value of the specified capability in the termcap database.
Return Value: The numeric value, or -1 on error.

***tgetstr
Prototype: char *tgetstr(const char *id, char **area);
Purpose: Gets the string value of the specified capability in the termcap database.
Return Value: A pointer to the string value, or NULL on error.

***tgoto
Prototype: char *tgoto(const char *cap, int col, int row);
Purpose: Expands the given capability with the specified parameters.
Return Value: A pointer to the resulting string.

***tputs
Prototype: int tputs(const char *str, int affcnt, int (*putc)(int));
Purpose: Outputs the given termcap string to the terminal.
Return Value: 0 on success, -1 on error.
