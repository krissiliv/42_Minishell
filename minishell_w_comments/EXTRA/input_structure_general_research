Commands typically follow the structure:


command [options] [arguments]
    command: The actual command or executable to run.
    options: Flags or switches that modify the behavior of the command. They are usually preceded by a hyphen (-).
    arguments: Additional information or parameters that the command may require.


Input and output redirection symbols, such as << or <, are used to manipulate the input/output streams of commands. For example:
    <: Input redirection. It takes input from a file or another command.
    >: Output redirection. It directs the output to a file or another command.
    >>: Appends output to a file.


***EXAMPLES:

# Basic command with options and arguments
command -option argument

# Command with input redirection
command < input_file

# Command with output redirection
command > output_file

# Command with both input and output redirection
command < input_file > output_file

# Command with appending output to a file
command >> output_file

The use of << typically denotes a here document, a way to pass multiple lines of input to a command, and its not directly related to options or arguments.

# Command with a pipe (output of command1 becomes input to command2)
command1 | command2

# Combining commands with options, arguments, and pipes
command1 -option1 argument1 | command2 -option2 argument2

# Example of a pipeline with multiple commands
cat file.txt | grep "pattern" | sort | uniq

# Another example with awk and sed
cat data.log | awk '{print $2}' | sed 's/error/ERROR/g'

# Handling quotes and special characters
echo "This is a quoted string"
echo 'Another quoted string with $variable'

# Redirections
cat < input_file          # Redirecting input from a file
echo "Hello" > output_file # Redirecting output to a file
echo "Appending" >> output_file  # Redirecting output in append mode
cat <<EOF                  # Here document
This is a multiline
text block.
EOF

# Pipes with commands, including environment variables
echo "PATH is $PATH" | grep "bin"

# Handling $? to get the exit status of the last foreground pipeline
command1 | command2
echo "Exit status: $?"




